lab1=#include <stdio.h>
#include<stdlib.h>
#include<string.h>
struct calElement
{
    char *day;
    int date;
    char *activity;
};
struct calElement*create()
{
    struct calElement*calendar;
    calendar=(struct calElement*)malloc(sizeof(struct calElement)*7);
    return calendar;
}
void read(struct calElement*calendar)
{
    char day[10];
    char activity[25];
    int i,date;
    for(i=0;i<7;i++)
    {
        printf("Enter the day:");
        scanf("%s",day);
        calendar[i].day=(char*)malloc(strlen(day)+1);
        strcpy(calendar[i].day,day);
        printf("Enter the date:");
        scanf("%d",&date);
        calendar[i].date=date;
        getchar();
        printf("Enter description of the activity:");
        scanf("%[^\n]s",activity);
        calendar[i].activity=(char*)malloc(strlen(activity)+1);
        strcpy(calendar[i].activity,activity);
    }
}
void display(struct calElement*calendar)
{
    int i;
    printf("\n\nYour calendar\n");
    printf("Day\t\tDate\t\tActivity");
    for(i=0;i<7;i++)
    {
        printf("\n%s\t\t%d\t\t%s",calendar[i].day,calendar[i].date,calendar[i].activity);
    }
}
void main()
{
    struct calElement*calendar;
    calendar=create();
    read(calendar);
    display(calendar);
    free(calendar);
}
lab2=
#include <stdio.h>
char STR[100],PAT[100],REP[100],ANS[100];
int s,p,r,a,flag=0;
void main()
{
    read();
    replace();
    display();
}
void read()
{
    printf("Enter the MAIN string\n");
    scanf("%s",STR);
    printf("Enter the PATTERN string\n");
    scanf("%s",PAT);
    printf("Enter the REPLACE string\n");
    scanf("%s",REP);
}
void replace()
{
    s=p=a=0;
    while(STR[s]!='\0')
    {
        if(STR[s]==PAT[p])
        {
            p++;
            s++;
            if(PAT[p]=='\0')
            {
                flag=1;
                for(r=0;REP[r]!='\0';r++,a++)
                    ANS[a]=REP[r];
                p=0;
            }
        }
        else
        {
            ANS[a]=STR[s];
            s++;
            a++;
            p=0;
        }
    }
}
void display()
{
    if(flag==0)
       printf("Pattern doesn't found!!!");
    else
    {
        ANS[a]='\0';
        printf("\nThe RESULTANT string is:\n%s\n",ANS);
    }
}
lab3=
#include <stdio.h>
#include<stdlib.h>
#include<math.h>
#define MAX 5
int s[MAX],top=-1,item,k;
int isfull()
{
    if(top>=MAX-1)
      return 1;
    return 0;
}
int isempty()
{
    if(top==-1)
      return 1;
    return 0;
}
void push(int item)
{
    top++;
    s[top]=item;
}
void pop()
{
    item=s[top];
    top--;
}
void display()
{
    int i;
    printf("the elements of the stacks are:");
    for(i=top;i>=0;i--)
    printf("%d \n",s[i]);
}
void check_pal()
{
    int num=0,temp,digit,revnum=0,k=0;
    if(top==-1)
    {
        printf("stack is empty\n");
        return;
    }
    else
    {
        while(top!=-1)
        {
            pop();
            num=num*10+item;
            revnum=item*pow(10,k)+revnum;
            k=k+1;
        }
        printf("\nReverse number of %d is:%d\n",num,revnum);
        if(num==revnum)
        printf("the stack contains a palindrome number\n");
        else
        printf("the stack does not contain a palindromenumber\n");
    }
}
void main()
{
    int ch;
    do
    {
        printf("\n1.push\n 2.pop\n 3.display\n 4.check palindrome 5.exit\n");
        printf("\n enter the choice:");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:printf("\n enter the element to be inserted");
                   scanf("%d",&item);
                   if(isfull())
                    printf("stack overflow\n");
                   else
                     push(item);
                     break;
            case 2:if(isempty())
                   printf("stack underflow");
                   else
                   {
                       pop();
                       printf("the item deleted is%d\n",item);
                   }
                   break;
            case 3:if(isempty())
                   printf("stack is empty\n");
                   else
                     display();
                   break;
            case 4:check_pal();
                   break;
            case 5:printf("program terminated\n");
                   exit(0);
            default:printf("invalid choice|n");
        }
    }while(ch!=5);
}
lab4=#include <stdio.h>
#include<ctype.h>
#define SIZE 20
char s[SIZE];
int top=-1;
void push(char elem)
{
    s[++top]=elem;
}
char pop()
{
    return(s[top--]);
}
int precedence (char elem)
{
    switch(elem)
    {
        case '#':return 0;
        case '(':return 1;
        case '+':
        case '-':return 2;
        case '*':
        case '/':
        case '%':return 3;
        case '$':
        case '^':return 4;
    }
    return elem;
}
void main()
{
    char infix[50],postfix[50],ch,elem;
    int i=0,k=0;
    printf("enter the infix expression");
    scanf("%s",infix);
    push('#');
    while(ch=infix[i++]!='\0')
    {
        if(ch=='(')
           push(ch);
        else if(isalnum(ch))
           postfix[k++]=ch;
        else if(ch==')')
        {
            while(s[top]!='(')
              postfix[k++]=pop();
            elem=pop();
        }
        else
        {
            while(precedence (s[top])>=precedence (ch))
              postfix[k++]=pop();
            push(ch);
        }
    }
    while(s[top]!='#')
    {
        postfix[k++]=pop();
    }
    postfix[k]='\0';
    printf("\ngiven infix expression is:%s",infix);
    printf("\npostfix expression is :%s",postfix);
}
lab5=
#include<stdio.h>
#include<string.h>
#include<ctype.h>
void push(int [],int*,int);
int pop(int [],int*);
int main()
{
    int iastack[50],i,op1,op2,res;
    char expr[50],symbol;
    int top=-1;
    printf("\n enter a valid postfic expression");
    scanf("%s",&expr);
    for(i=0;i<strlen(expr);i++)
    {
        symbol=expr[i];
        if(isdigit(symbol))
        {
            push(iastack,&top,symbol-'0');
        }
        else
        {
            op2=pop(iastack,&top);
            op1=pop(iastack,&top);
            switch(symbol)
            {
                case'+':res=op1+op2;
                            break;
                case'-':res=op1-op2;
                            break;
                case'*':res=op1*op2;
                            break;
                case'/':res=op1/op2;
                            break;
                case'%':res=op1%op2;
                            break;
                case'^':res=(int)pow(op1,op2);
                            break;
            }
            push(iastack,&top,res);
        }
    }
    res=pop(iastack,&top);
    printf("tne value of %s expression is:%d",expr,res);
    return 0;
}
void push(int Stack[],int*t,int elem)
{
    *t=*t+1;
    Stack[*t]=elem;
}
int pop(int Stack[],int*t)
{
    int elem;
    elem=Stack[*t];
    *t=*t-1;
    return elem;
}

OUTPUT=enter a valid postfic expression23+3*
tne value of 23+3* expression is:15


b-// move tower of hanio disk
#include<stdio.h>
void towers(int,char,char,char);
int main()
{
    int num;
    printf("enter the number of disk");
    scanf("%d",&num);
    printf("\nThe sequence of disk involved in tower of hanio");
    towers(num,'A','C','B');
    printf("\n");
}
void towers(int num,char frompeg,char topeg,char auxpeg)
{
    if(num==1)
    {
        printf("\nmove 1 disk from peg %c to peg %c",frompeg,topeg);
        return;
    }
    towers(num-1,frompeg,auxpeg,topeg);
    printf("\nmove %d disk from peg %c to peg %c",num,frompeg,topeg);
    towers(num-1,auxpeg,topeg,frompeg);
}
lab6=
#include <stdio.h>
#include<stdlib.h>
#define QSIZE 4
int q[QSIZE],r=-1,f=0,count=0,item;
void insert()
{
    if(count==QSIZE)
    {
        printf("queue is full\n");
        return;
    }
    r=(r+1)%QSIZE;
    q[r]=item;
    count++;
}
void del()
{
    if(count==0)
    {
        printf("queue is empty\n");
        return;
    }
    printf("item is deleted %d\n",q[f]);
    f=(f+1)%QSIZE;
    count--;
}
void display(int front)
{
    int i;
    if(count==0)
    {
        printf("queue is empty");
        return;
    }
    printf("contents of the queue\n");
    for(i=1;i<=count;i++)
    {
        printf("%d\n",q[front]);
        front=(front+1)%QSIZE;
    }
}
void main()
{
    int choice;
    do
    {
        printf("\n************\n");
        printf("circular queue operation\n");
        printf("1.insert\n");
        printf("2.delete\n");
        printf("3.display\n");
        printf("4.quit\n");
        printf("enter your choice\n");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:printf("enter the item to be insert\n");
                   scanf("%d",&item);
                   insert();
                   break;
            case 2:del();
                   break;
            case 3:display(f);
                   break;
            case 4:exit(0);
            default:printf("invalid choice");
        }
    }while(choice!=4);
}
